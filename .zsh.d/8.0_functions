#!/bin/zsh

###############
# 8 functions #
###############

self_update () {
    cd $HOME/.zerorc
    gp
    gsu
    gsfu
}

self_upgrade () {
    cd $HOME/.zerorc
    self_update
    gk master
    gsf --recursive git checkout master
    gsf --recursive git pull origin master
}


# Fuzzy find
f() {
    find . -name "*"$1"*" ${(@)argv[2,$#]}
}
# Strict find
sf() {
    find . -name $*
}

# Colorize stderr
#exec 2>>(while read line; do
#  print '\e[91m'${(q)line}'\e[0m' > /dev/tty; print -n $'\0'; done &)

# Parse last command content
autoload -U read-from-minibuffer
zmodload -i zsh/parameter
insert-last-command-output() {
    local last_out="$(eval $history[$((HISTCMD-1))])"
    if [[ -z $last_out ]]; then
        return
    fi
    local -a out_array
    out_array=(${(f)last_out})
    if [[ $#out_array -eq 1 ]]; then
        LBUFFER+=$last_out
    else
        local disp
        disp=""
        local i=1
        for line in $out_array; do
            disp+="$i"
            disp+=":"
            disp+=$line
            disp+="
"
            ((i++))
        done
        read-from-minibuffer $disp
        LBUFFER+=$out_array[$REPLY]
    fi
}
zle -N insert-last-command-output
bindkey "^[[1;3A" insert-last-command-output
bindkey "^[[1;5A" insert-last-command-output

cpg()
{
    set -A params $(echo "$@")
    # Le dernier champs est la destination
    params[$(( ${#params[@]} ))]=()
    # $COLUMNS correspond à la largeur de votre terminal
    # et est mise à jour après chaque commande si l'option
    # checkwinsize est définie ou à la réception du signal WINCH
    kill -s WINCH $$
    [ $COLUMNS -lt 20 ] && (cp -a -- "$@"; return $?)
    lim=$(( $COLUMNS - 10 ))
    # Les "--" sont là pour signifier qu'il n'y a pas d'options
    # sinon, il faut modifier le "du" etc...
    # J'utilise le "-a" pour pouvoir copier par exemple des
    # répertoires sans soucis.
    strace -e write cp -a -- "$@" 2>&1 |
    awk '{
       count += $NF    # rajoute la valeur du dernier champs
       # 10 représente la fréquence d affichage
       if (count % 10 == 0)
       {
         percent = count / total_size * 100
         printf "%3d%% [", percent
         for (i=0;i<=percent*'$lim'/100;i++)
           printf "="
         if (percent<100)
           printf ">"
         for (j=i;j< '$lim';j++)
           printf " "
         printf "]\r"
       }
     }
     END { printf "100\n" }' \
      total_size=$(du -bc "${params[@]}" | awk 'END {print $1}') \
      count=0
}

mvg()
{
    set -A params $(echo "$@")
    # Le dernier champs est la destination
    params[$(( ${#params[@]} ))]=()
    # $COLUMNS correspond à la largeur de votre terminal
    # et est mise à jour après chaque commande si l'option
    # checkwinsize est définie ou à la réception du signal WINCH
    kill -s WINCH $$
    [ $COLUMNS -lt 20 ] && (mv -- "$@"; return $?)
    lim=$(( $COLUMNS - 10 ))
    # Les "--" sont là pour signifier qu'il n'y a pas d'options
    # sinon, il faut modifier le "du" etc...
    strace -e write mv -- "$@" 2>&1 |
    awk '{
       count += $NF    # rajoute la valeur du dernier champs
       # 10 représente la fréquence d affichage
       if (count % 10 == 0)
       {
         percent = count / total_size * 100
         printf "%3d%% [", percent
         for (i=0;i<=percent*'$lim'/100;i++)
           printf "="
         if (percent<100)
           printf ">"
         for (j=i;j< '$lim';j++)
           printf " "
         printf "]\r"
       }
     }
     END { printf "100\n" }' \
      total_size=$(du -bc "${params[@]}" | awk 'END {print $1}') \
      count=0
}
